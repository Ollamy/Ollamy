      # - name: Run backend tests
      #   id: test
      #   run: docker compose exec -it backend yarn test:ci

      # - name: Extract result file
      #   id: extract-result
      #   run: docker compose exec -it backend cat junit.xml

      # - name: Extract result file 2
      #   id: extract-result-2
      #   run: docker compose exec -it backend cat junit.xml > junit.xml

      # - name: list files
      #   id: list-files
      #   run: ls -la

      # - name: Upload test results
      #   id: upload-test-results
      #   uses: dorny/test-reporter@v1
      #   if: success() || failure()
      #   with:
      #     name: Backend Test Results
      #     path: junit.xml

name: Test & report backend results

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - master
      - development

jobs:
  build:
    if: github.event.pull_request.draft != true
    runs-on: self-hosted
    environment: Docker
    env:
      BACKEND_PORT: ${{ secrets.BACKEND_PORT }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      PRISMA_STUDIO_PORT: ${{ secrets.PRISMA_STUDIO_PORT }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      REDIS_USERNAME: ${{ secrets.REDIS_USERNAME }}


    steps:
      - uses: actions/checkout@v3
      - name: install dependencies
        working-directory: ./packages/service-backend
        run: yarn

      # - run: yarn
      # - run: yarn test:ci
