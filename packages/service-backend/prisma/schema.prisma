generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

enum Role {
  MEMBER
  OWNER
  ADMIN
}

enum PermissionUser {
  READ
  WRITE
  DELETE
  PING
  ADMIN
}

enum PermissionCourse {
  READ
  WRITE
  DELETE
  PING
  ADMIN
}

enum PermissionSection {
  READ
  WRITE
  DELETE
  PING
}

enum PermissionLesson {
  READ
  WRITE
  DELETE
  PING
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  firstname       String
  lastname        String
  email           String            @unique
  password        String
  communities_id  String[]          @db.Uuid
  UsertoCourse    UsertoCourse[]
  Course          Course[]
  Message         Message[]
  UserDiscussions UserDiscussions[]
  UsertoLesson    UsertoLesson[]
  UsertoScore     UsertoScore[]
  UserBadges      UserBadges[]
}

model UsertoCourse {
  id      String   @id @default(uuid()) @db.Uuid
  course  Course   @relation(references: [id], fields: [course_id], onDelete: Cascade)
  user    User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  lesson  Lesson?  @relation(references: [id], fields: [last_lesson_id])
  section Section? @relation(references: [id], fields: [last_section_id])

  role_user          Role                @default(MEMBER)
  permission_user    PermissionUser[]    @default([])
  permission_course  PermissionCourse[]  @default([])
  permission_section PermissionSection[] @default([])
  permission_lesson  PermissionLesson[]  @default([])
  course_id          String              @db.Uuid
  user_id            String              @db.Uuid
  score              Int?                @default(0)
  hp                 Int?                @default(20)

  last_section_id String? @db.Uuid
  last_lesson_id  String? @db.Uuid

  @@unique([course_id, user_id])
}

enum LessonStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model UsertoLesson {
  id                String       @id @default(uuid()) @db.Uuid
  lesson            Lesson       @relation(references: [id], fields: [lesson_id], onDelete: Cascade)
  user              User         @relation(references: [id], fields: [user_id], onDelete: Cascade)
  lesson_id         String       @db.Uuid
  user_id           String       @db.Uuid
  score             Int?         @default(0)
  complete_lecture  Boolean      @default(false)
  complete_question Boolean      @default(false)
  status            LessonStatus @default(NOT_STARTED)
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  @@unique([lesson_id, user_id])
}

model Course {
  id          String         @id @default(uuid()) @db.Uuid
  section     Section[]
  userlist    UsertoCourse[]
  user        User           @relation(references: [id], fields: [owner_id], onDelete: Cascade)
  owner_id    String         @db.Uuid
  title       String
  description String?
  picture     Picture?       @relation(references: [id], fields: [picture_id], onDelete: Cascade)
  picture_id  String?        @db.Uuid
}

model Section {
  id           String         @id @default(uuid()) @db.Uuid
  course       Course         @relation(references: [id], fields: [course_id], onDelete: Cascade)
  course_id    String         @db.Uuid
  title        String
  description  String?
  Lesson       Lesson[]
  UsertoCourse UsertoCourse[]
}

model Lesson {
  id           String         @id @default(uuid()) @db.Uuid
  section      Section        @relation(references: [id], fields: [section_id], onDelete: Cascade)
  section_id   String         @db.Uuid
  title        String
  description  String?
  Questions    Question[]
  Lecture      Lecture[]
  UsertoLesson UsertoLesson[]
  UsertoCourse UsertoCourse[]
}

enum AnswerType {
  TEXT
  QUIZ
  OTHER
}

enum QuestionType {
  TEXT
  VIDEO
  IMAGE
  AUDIO
  OTHER
}

enum QuestionDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  MASTER
}

model Lecture {
  id        String @id @default(uuid()) @db.Uuid
  Lesson    Lesson @relation(references: [id], fields: [lesson_id], onDelete: Cascade)
  lesson_id String @db.Uuid
  data      String
}

model UsertoScore {
  id      String @id @default(uuid()) @db.Uuid
  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id String @db.Uuid
  score   Int?   @default(0)

  @@unique([user_id])
}

model Question {
  id              String              @id @default(uuid()) @db.Uuid
  Lesson          Lesson              @relation(references: [id], fields: [lesson_id], onDelete: Cascade)
  lesson_id       String              @db.Uuid
  title           String
  type_answer     AnswerType
  type_question   QuestionType
  description     String?
  Answer          Answer[]
  trust_answer_id String?             @db.Uuid
  picture         Picture?            @relation(references: [id], fields: [picture_id], onDelete: Cascade)
  picture_id      String?             @db.Uuid
  points          Int?                @default(0)
  difficulty      QuestionDifficulty?
  order           String
}

model Answer {
  id          String   @id @default(uuid()) @db.Uuid
  Question    Question @relation(references: [id], fields: [question_id], onDelete: Cascade)
  question_id String   @db.Uuid
  data        String?
  picture     Picture? @relation(references: [id], fields: [picture_id], onDelete: Cascade)
  picture_id  String?  @db.Uuid
}

model Discussion {
  id              String            @id @default(uuid()) @db.Uuid
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  title           String?
  image_url       String?
  Message         Message[]
  UserDiscussions UserDiscussions[]
}

model Message {
  id            String      @id @default(uuid()) @db.Uuid
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  discussion_id String      @db.Uuid
  Discussion    Discussion? @relation(fields: [discussion_id], references: [id], onDelete: Cascade)
  owner_id      String      @db.Uuid
  user          User        @relation(references: [id], fields: [owner_id], onDelete: Cascade)
  content       String
}

model UserDiscussions {
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String     @db.Uuid
  discussion    Discussion @relation(fields: [discussion_id], references: [id], onDelete: Cascade)
  discussion_id String     @db.Uuid

  @@id([user_id, discussion_id])
}

model Picture {
  id       String     @id @default(uuid()) @db.Uuid
  filename String
  Course   Course[]
  Question Question[]
  Answer   Answer[]
}

model Badge {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String
  image_name  String
  color       String
  order       Int

  User UserBadges[]
}

model UserBadges {
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @db.Uuid
  badge      Badge    @relation(fields: [badge_id], references: [id], onDelete: Cascade)
  badge_id   String   @db.Uuid
  created_at DateTime @default(now())

  @@id([user_id, badge_id])
}
